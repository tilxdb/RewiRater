#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Ç–¥–µ–ª—å–Ω—ã–π Twitter –º–æ–Ω–∏—Ç–æ—Ä, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç Telegram –±–æ—Ç–∞
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config import Config
from bot.twitter_monitor import TwitterMonitor
from bot.twitter_adapter import TwitterAdapter
from ai.content_rewriter import ContentRewriter, SourcePost
from utils.logger import setup_logger

logger = setup_logger()

class TwitterMonitorStandalone:
    """–û—Ç–¥–µ–ª—å–Ω—ã–π Twitter –º–æ–Ω–∏—Ç–æ—Ä"""
    
    def __init__(self):
        self.config = Config()
        self.twitter_monitor = None
        self.content_rewriter = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ Twitter –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Twitter –º–æ–Ω–∏—Ç–æ—Ä–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Twitter –º–æ–Ω–∏—Ç–æ—Ä
            self.twitter_monitor = TwitterMonitor(self.config)
            if not await self.twitter_monitor.initialize():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Twitter –º–æ–Ω–∏—Ç–æ—Ä")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º content rewriter
            self.content_rewriter = ContentRewriter(self.config)
            await self.content_rewriter.setup_ai_clients()
            
            logger.info("‚úÖ Twitter –º–æ–Ω–∏—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self._run_monitoring()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    async def _run_monitoring(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while True:
            try:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç—ã (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.config.TWITTER_CHECK_INTERVAL_MINUTES} –º–∏–Ω)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                new_tweets = await self.twitter_monitor.check_all_accounts()
                
                if new_tweets:
                    logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω–æ {len(new_tweets)} –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤")
                    await self._process_twitter_posts(new_tweets)
                else:
                    logger.info("üì± –ù–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                logger.info(f"‚è∞ –ñ–¥–µ–º {self.config.TWITTER_CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
                await asyncio.sleep(self.config.TWITTER_CHECK_INTERVAL_MINUTES * 60)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                # –ü—Ä–∏ rate limit –∂–¥–µ–º –¥–æ–ª—å—à–µ, –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö - –º–µ–Ω—å—à–µ
                if "Rate limit exceeded" in str(e):
                    logger.warning("‚ö†Ô∏è Rate limit Twitter API, –∂–¥–µ–º 15 –º–∏–Ω—É—Ç")
                    await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç
                else:
                    logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ Twitter API, –∂–¥–µ–º 5 –º–∏–Ω—É—Ç")
                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
    
    async def _process_twitter_posts(self, twitter_posts):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö Twitter –ø–æ—Å—Ç–æ–≤"""
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã
            relevant_posts = TwitterAdapter.filter_relevant_twitter_posts(
                twitter_posts,
                min_engagement=10,
                exclude_retweets=True,
                exclude_replies=True
            )
            
            if not relevant_posts:
                logger.info("üì± –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ SourcePost
            source_posts = TwitterAdapter.convert_twitter_posts_to_source_posts(relevant_posts)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
            for source_post in source_posts:
                await self._process_single_post(source_post)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Twitter –ø–æ—Å—Ç–æ–≤: {e}")
    
    async def _process_single_post(self, source_post: SourcePost):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ Twitter –ø–æ—Å—Ç–∞"""
        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ Twitter –ø–æ—Å—Ç–∞: {source_post.id} –æ—Ç @{source_post.channel_title}")
            
            # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å—Ç
            rewritten_post = await self.content_rewriter.rewrite_post(source_post)
            
            logger.info(f"‚úÖ Twitter –ø–æ—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω: {rewritten_post.rewritten_text[:100]}...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API –∏–ª–∏ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Twitter –ø–æ—Å—Ç–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = TwitterMonitorStandalone()
    await monitor.start()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Twitter –º–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
