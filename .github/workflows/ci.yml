name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Format check with black
      run: |
        black --check .
    
    - name: Test imports
      run: |
        python -c "import config_example; print('Config import OK')"
        python -c "from ai.content_rewriter import ContentRewriter; print('AI module OK')"
        python -c "from bot.telegram_bot import TelegramUserBot; print('Bot module OK')"
    
    - name: Security check
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        # Проверяем, что нет секретов в коде
        if grep -r "sk-" . --exclude-dir=.git --exclude="*.md"; then
          echo "ERROR: Potential API keys found in code!"
          exit 1
        fi

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Check for secrets
      run: |
        # Проверяем, что config.py не попал в репозиторий
        if [ -f "config.py" ]; then
          echo "ERROR: config.py found in repository!"
          exit 1
        fi
        
        # Проверяем, что нет .session файлов
        if find . -name "*.session" -not -path "./.git/*"; then
          echo "ERROR: Session files found in repository!"
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build documentation
      run: |
        echo "Documentation build would go here"
        # mkdocs build (если добавим MkDocs)
    
    - name: Create release package
      run: |
        tar -czf rewirater-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='config.py' \
          --exclude='*.session' \
          .
