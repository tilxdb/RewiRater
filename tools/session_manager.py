#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""

import asyncio
from telethon import TelegramClient
from pathlib import Path
import shutil

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 21601645
API_HASH = '6bc7e9ceae3ed7d5694ac49d6d67cedc'

class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π Telegram"""
    
    def __init__(self):
        self.sessions_dir = Path("sessions")
        self.sessions_dir.mkdir(exist_ok=True)
    
    async def create_session(self, session_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_path = self.sessions_dir / session_name
        
        print(f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {session_name}")
        
        client = TelegramClient(str(session_path), API_ID, API_HASH)
        
        try:
            await client.start()
            
            if await client.is_user_authorized():
                me = await client.get_me()
                print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
                print(f"üÜî ID: {me.id}")
                print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
                session_info = {
                    "session_name": session_name,
                    "user_id": me.id,
                    "username": me.username,
                    "first_name": me.first_name,
                    "phone": me.phone
                }
                
                info_file = self.sessions_dir / f"{session_name}.info.json"
                import json
                with open(info_file, 'w', encoding='utf-8') as f:
                    json.dump(session_info, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {info_file}")
                return True
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
        finally:
            await client.disconnect()
    
    async def check_session(self, session_name: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏"""
        session_path = self.sessions_dir / session_name
        
        if not session_path.exists():
            print(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {session_path}")
            return False
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏: {session_name}")
        
        client = TelegramClient(str(session_path), API_ID, API_HASH)
        
        try:
            await client.start()
            
            if await client.is_user_authorized():
                me = await client.get_me()
                print(f"‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞!")
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
                print(f"üÜî ID: {me.id}")
                return True
            else:
                print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False
        finally:
            await client.disconnect()
    
    def list_sessions(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        print("üìã –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π:")
        print("-" * 50)
        
        session_files = list(self.sessions_dir.glob("*.session"))
        
        if not session_files:
            print("üì≠ –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        for session_file in session_files:
            session_name = session_file.stem
            info_file = self.sessions_dir / f"{session_name}.info.json"
            
            print(f"üìÅ {session_name}")
            
            if info_file.exists():
                try:
                    import json
                    with open(info_file, 'r', encoding='utf-8') as f:
                        info = json.load(f)
                    print(f"   üë§ {info.get('first_name', 'Unknown')} (@{info.get('username', 'no_username')})")
                    print(f"   üÜî ID: {info.get('user_id', 'Unknown')}")
                except:
                    print("   ‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                print("   ‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            print()
        
        return [f.stem for f in session_files]
    
    def delete_session(self, session_name: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        session_path = self.sessions_dir / session_name
        info_path = self.sessions_dir / f"{session_name}.info.json"
        
        if not session_path.exists():
            print(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {session_name}")
            return False
        
        try:
            session_path.unlink()
            if info_path.exists():
                info_path.unlink()
            
            print(f"üóëÔ∏è –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞: {session_name}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    def copy_session(self, source_name: str, target_name: str):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        source_path = self.sessions_dir / source_name
        target_path = self.sessions_dir / target_name
        
        if not source_path.exists():
            print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_name}")
            return False
        
        try:
            shutil.copy2(source_path, target_path)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            source_info = self.sessions_dir / f"{source_name}.info.json"
            target_info = self.sessions_dir / f"{target_name}.info.json"
            
            if source_info.exists():
                shutil.copy2(source_info, target_info)
            
            print(f"üìã –°–µ—Å—Å–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {source_name} ‚Üí {target_name}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False

async def main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    manager = SessionManager()
    
    while True:
        print("\n" + "="*50)
        print("üõ†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π Telegram")
        print("="*50)
        print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é")
        print("3. –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π")
        print("4. –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é")
        print("5. –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é")
        print("0. –í—ã—Ö–æ–¥")
        print("-"*50)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        
        if choice == "1":
            session_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Å—Å–∏–∏: ").strip()
            if session_name:
                await manager.create_session(session_name)
        
        elif choice == "2":
            session_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Å—Å–∏–∏: ").strip()
            if session_name:
                await manager.check_session(session_name)
        
        elif choice == "3":
            manager.list_sessions()
        
        elif choice == "4":
            sessions = manager.list_sessions()
            if sessions:
                session_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
                if session_name and session_name in sessions:
                    confirm = input(f"–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é '{session_name}'? (y/N): ").strip().lower()
                    if confirm == 'y':
                        manager.delete_session(session_name)
        
        elif choice == "5":
            sessions = manager.list_sessions()
            if sessions:
                source = input("–ò—Å—Ö–æ–¥–Ω–∞—è —Å–µ—Å—Å–∏—è: ").strip()
                target = input("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ").strip()
                if source and target:
                    manager.copy_session(source, target)
        
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π...")
    asyncio.run(main())
